name: Vulnerable CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Hardcoded secrets (vulnerability)
  DATABASE_PASSWORD: admin123
  API_KEY: sk-1234567890abcdef
  JWT_SECRET: super-secret-jwt-key
  DOCKER_PASSWORD: password123

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2  # Using old version with vulnerabilities
    
    - name: Set up Python
      uses: actions/setup-python@v2  # Old version
      with:
        python-version: 3.8  # Older Python version
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements.txt
        # Install additional vulnerable packages
        pip install django==2.2.24 flask==1.0.2
    
    - name: Run vulnerable commands
      run: |
        # Command injection vulnerability
        echo "Deploying to: ${{ github.event.inputs.environment }}"
        eval "echo 'Environment: ${{ github.event.inputs.environment }}'"
        
        # Insecure file permissions
        chmod 777 -R .
        
        # Download and execute remote script (dangerous)
        curl -s https://raw.githubusercontent.com/example/scripts/main/deploy.sh | bash
    
    - name: Run tests with vulnerabilities
      run: |
        cd python
        python -m pytest tests/ -v
        
        # Expose sensitive information
        echo "Database URL: postgresql://admin:$DATABASE_PASSWORD@localhost/db"
        echo "API Key: $API_KEY"
    
    - name: Build Docker image
      run: |
        cd python
        docker build -t vulnerable-app:latest .
        
        # Run container with dangerous options
        docker run --privileged --network=host -v /:/host vulnerable-app:latest
    
    - name: Deploy with hardcoded credentials
      run: |
        # Hardcoded SSH key (vulnerability)
        echo "-----BEGIN RSA PRIVATE KEY-----" > deploy_key
        echo "MIIEpAIBAAKCAQEA7..." >> deploy_key
        echo "-----END RSA PRIVATE KEY-----" >> deploy_key
        chmod 600 deploy_key
        
        # Deploy using insecure methods
        scp -o StrictHostKeyChecking=no -i deploy_key app.tar.gz user@server:/tmp/
        ssh -o StrictHostKeyChecking=no -i deploy_key user@server "cd /tmp && tar -xzf app.tar.gz"
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'vulnerable-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v1
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Run comprehensive security scan
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        sudo sh -c 'echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" > /etc/apt/sources.list.d/trivy.list'
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan filesystem for vulnerabilities
        trivy fs --format json --output trivy-fs-report.json python/
        
        # Scan requirements.txt for vulnerable dependencies
        trivy fs --format table python/requirements.txt
        
        # Build and scan Docker image
        cd python
        docker build -t test-app .
        trivy image --format table test-app:latest
        
        # Scan for secrets
        trivy fs --scanners secret --format table .
    
    - name: Display vulnerability summary
      run: |
        echo "=== VULNERABILITY SCAN RESULTS ==="
        echo "This project intentionally contains vulnerabilities for testing:"
        echo "- Vulnerable Python dependencies"
        echo "- Hardcoded secrets and credentials"
        echo "- Command injection vulnerabilities"
        echo "- SQL injection vulnerabilities"
        echo "- Insecure deserialization"
        echo "- Weak cryptographic algorithms"
        echo "- Information disclosure"
        echo "- Insecure Docker configurations"
        echo "=================================="