name: SWFT Container CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      project_name:
        description: "Logical Project Name for SWFT tracking"
        type: string
        default: "swft-demo"
      upload_to_azure:
        description: "Upload SBOM/scan/run JSON to Azure Storage (RBAC via azure/login)"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload SBOM/scan/run JSON as GitHub Artifacts"
        type: boolean
        default: true
      storage_container_sboms:
        description: "Azure container for SBOMs"
        type: string
        default: "sboms"
      storage_container_scans:
        description: "Azure container for vulnerability scans"
        type: string
        default: "scans"
      storage_container_runs:
        description: "Azure container for run JSON payloads"
        type: string
        default: "runs"
      # Trivy controls ONLY for manual runs (push runs never fail on findings)
      fail_on_trivy:
        description: "Fail the workflow if Trivy finds vulnerabilities (manual runs only)"
        type: boolean
        default: false
      trivy_severity:
        description: "Severities to gate on (comma-separated)"
        type: string
        default: "HIGH,CRITICAL"
      trivy_ignore_unfixed:
        description: "Ignore unfixed vulnerabilities"
        type: boolean
        default: true
      fail_on_cosign_verify:
        description: "Fail the workflow if Cosign verify fails"
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write
  security-events: write

env:
  # Container registry
  ACR_LOGIN_SERVER:     ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME:         ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD:         ${{ secrets.ACR_PASSWORD }}
  IMAGE_NAME:           fastapi-demo
  IMAGE_TAG:            ${{ secrets.IMAGE_TAG }}

  # Azure resources
  AZURE_RESOURCE_GROUP: demo-swft-cicd
  AZURE_CONTAINER_NAME: swft-fastapi
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}

  # Defaults for push runs (wonâ€™t fail the job)
  TRIVY_SEVERITY:       ${{ vars.TRIVY_SEVERITY || 'HIGH,CRITICAL' }}
  TRIVY_IGNORE_UNFIXED: ${{ vars.TRIVY_IGNORE_UNFIXED || 'true' }}

  # Project Name and Run metadata
  PROJECT_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.project_name || vars.PROJECT_NAME || github.event.repository.name }}
  RUN_ID:       ${{ github.run_id }}
  RUN_NUMBER:   ${{ github.run_number }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (Service Principal, AzureCloud)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: azureCloud

      - name: Derive names, prefixes, and timestamps
        run: |
          set -e
          FILE_PREFIX="${PROJECT_NAME}-${RUN_ID}"
          echo "FILE_PREFIX=$FILE_PREFIX" >> $GITHUB_ENV
          echo "SBOM_FILE=${FILE_PREFIX}-sbom.json"    >> $GITHUB_ENV
          echo "TRIVY_FILE=${FILE_PREFIX}-trivy.json"  >> $GITHUB_ENV
          echo "SARIF_FILE=${FILE_PREFIX}-trivy.sarif" >> $GITHUB_ENV
          echo "DEPLOY_FILE=${FILE_PREFIX}-deploy.txt" >> $GITHUB_ENV
          echo "RUN_JSON_FILE=${FILE_PREFIX}-run.json" >> $GITHUB_ENV
          # Single 'folder' (virtual path) for ADLS/Blob uploads
          echo "BLOB_PREFIX=${PROJECT_NAME}-${RUN_ID}"  >> $GITHUB_ENV
          echo "ACTIONS_RUN_URL=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}" >> $GITHUB_ENV
          date -u +%FT%TZ | xargs -I{} echo "RUN_TIMESTAMP={}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Pull image for local scan
        run: docker pull "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Get image digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}" | awk -F'@' '{print $2}')
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.0

      - name: Decode Cosign keys
        run: |
          echo "${{ secrets.COSIGN_KEY_B64 }}" | base64 -d > cosign.key
          chmod 600 cosign.key
          echo "${{ secrets.COSIGN_PUB_KEY_B64 }}" | base64 -d > cosign.pub
          chmod 644 cosign.pub

      - name: Sign image (registry-only)
        run: |
          cosign sign \
            --key cosign.key \
            --tlog-upload=false \
            "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Verify image signature (optional gate)
        env:
          POLICY_FAIL_ON_VERIFY: ${{ github.event_name == 'workflow_dispatch' && inputs.fail_on_cosign_verify || 'true' }}
        run: |
          set +e
          cosign verify --key cosign.pub "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}" >/tmp/cosign.verify 2>&1
          STATUS=$?
          if [ $STATUS -eq 0 ]; then
            echo "COSIGN_VERIFY_STATUS=passed" >> $GITHUB_ENV
          else
            echo "COSIGN_VERIFY_STATUS=failed" >> $GITHUB_ENV
            echo "Cosign verify failed:"; cat /tmp/cosign.verify || true
            if [ "$POLICY_FAIL_ON_VERIFY" = "true" ]; then
              exit 1
            fi
          fi
          set -e

      - name: Generate SBOM (Syft via Anchore)
        uses: anchore/sbom-action@v0.20.1
        with:
          image:        ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format:       cyclonedx-json
          output-file:  ${{ env.SBOM_FILE }}
          upload-artifact: false

      - name: Run Trivy vulnerability scanner (image)
        id: trivy
        uses: aquasecurity/trivy-action@0.33.1
        env:
          TRIVY_USERNAME: ${{ env.ACR_USERNAME }}
          TRIVY_PASSWORD: ${{ env.ACR_PASSWORD }}
        with:
          version: 'v0.66.0'
          scan-type: 'image'
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'json'
          output: ${{ env.TRIVY_FILE }}
          severity: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_severity || env.TRIVY_SEVERITY }}
          ignore-unfixed: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_ignore_unfixed || env.TRIVY_IGNORE_UNFIXED }}
          scanners: 'vuln'
          hide-progress: true
          cache: true
          cache-dir: ${{ github.workspace }}/.cache/trivy
          exit-code: '0'

      - name: Ensure jq present
        run: jq --version || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Canonicalize filenames in repo root
        run: |
          set -e
          echo "Looking for generator outputs (legacy and canonical names)..."
          ls -la || true
          # If actions used legacy names, copy to canonical filenames in repo root
          [ -f sbom.cyclonedx.json ] && cp -f sbom.cyclonedx.json "${SBOM_FILE}"
          [ -f trivy-report.json ]   && cp -f trivy-report.json   "${TRIVY_FILE}"
          [ -f trivy-results.sarif ] && cp -f trivy-results.sarif "${SARIF_FILE}"
          # If actions already wrote canonical names, they are left as-is
          echo "Final expected files:"
          ls -l "${SBOM_FILE}" "${TRIVY_FILE}" || true

      - name: Enforce Trivy policy (manual runs can fail; pushes do NOT)
        env:
          POLICY_FAIL_ON_TRIVY:        ${{ github.event_name == 'workflow_dispatch' && inputs.fail_on_trivy || (vars.FAIL_ON_TRIVY || 'false') }}
          POLICY_TRIVY_SEVERITY:       ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_severity || env.TRIVY_SEVERITY }}
          POLICY_TRIVY_IGNORE_UNFIXED: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_ignore_unfixed || env.TRIVY_IGNORE_UNFIXED }}
        run: |
          set -e
          if [ ! -s "${TRIVY_FILE}" ]; then
            echo "Trivy report missing or empty"; exit 2
          fi
          SEVERITIES="$POLICY_TRIVY_SEVERITY"
          COUNT=$(jq --arg sev "$SEVERITIES" '
            [.Results[].Vulnerabilities[]? as $v
              | ($sev | split(",")) as $levels
              | select($levels | index($v.Severity))
            ] | length' "${TRIVY_FILE}")
          echo "TRIVY_FINDINGS=$COUNT" >> $GITHUB_ENV
          echo "Findings at severities [$SEVERITIES]: $COUNT"
          {
            echo "### Trivy summary"
            echo ""
            echo "- Fail on Trivy (manual only): $POLICY_FAIL_ON_TRIVY"
            echo "- Severities: $SEVERITIES"
            echo "- Ignore unfixed: $POLICY_TRIVY_IGNORE_UNFIXED"
            echo "- Findings: $COUNT"
          } >> "$GITHUB_STEP_SUMMARY"
          if [ "$POLICY_FAIL_ON_TRIVY" = "true" ] && [ "$COUNT" -gt 0 ]; then
            echo "Failing due to Trivy findings (manual run opted-in)."
            exit 1
          fi
          echo "Continuing (policy)."

      - name: Generate Trivy SARIF
        uses: aquasecurity/trivy-action@0.33.1
        with:
          version: 'v0.66.0'
          scan-type: 'image'
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: ${{ env.SARIF_FILE }}
          severity: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_severity || env.TRIVY_SEVERITY }}
          ignore-unfixed: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_ignore_unfixed || env.TRIVY_IGNORE_UNFIXED }}
          scanners: 'vuln'
          exit-code: '0'

      - name: Verify three artifacts exist (root)
        run: |
          set -e
          for f in "${SBOM_FILE}" "${TRIVY_FILE}" "${SARIF_FILE}"; do
            [ -s "$f" ] || { echo "Missing $f"; exit 2; }
          done
          echo "All files present:"
          ls -l "${SBOM_FILE}" "${TRIVY_FILE}" "${SARIF_FILE}"

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}
          category: trivy

      # ---------- Optional Azure uploads (RBAC, ADLS Gen2 path prefix) ----------
      - name: Ensure Azure containers
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage container create --name "${{ inputs.storage_container_sboms }}"  --account-name "${AZURE_STORAGE_ACCOUNT}" --auth-mode login >/dev/null
            az storage container create --name "${{ inputs.storage_container_scans }}" --account-name "${AZURE_STORAGE_ACCOUNT}" --auth-mode login >/dev/null
            az storage container create --name "${{ inputs.storage_container_runs }}"  --account-name "${AZURE_STORAGE_ACCOUNT}" --auth-mode login >/dev/null

      - name: Upload SBOM to Azure Storage (single folder)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name "${AZURE_STORAGE_ACCOUNT}" \
              --container-name "${{ inputs.storage_container_sboms }}" \
              --file "${SBOM_FILE}" \
              --name "${BLOB_PREFIX}/${SBOM_FILE}" \
              --overwrite \
              --auth-mode login
            SBOM_URL=$(az storage blob url --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_sboms }}" --name "${BLOB_PREFIX}/${SBOM_FILE}" -o tsv)
            echo "SBOM_URL=$SBOM_URL" >> $GITHUB_ENV

      - name: Upload Trivy report to Azure Storage (single folder)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name "${AZURE_STORAGE_ACCOUNT}" \
              --container-name "${{ inputs.storage_container_scans }}" \
              --file "${TRIVY_FILE}" \
              --name "${BLOB_PREFIX}/${TRIVY_FILE}" \
              --overwrite \
              --auth-mode login
            TRIVY_URL=$(az storage blob url --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_scans }}" --name "${BLOB_PREFIX}/${TRIVY_FILE}" -o tsv)
            echo "TRIVY_URL=$TRIVY_URL" >> $GITHUB_ENV

      # ---------- Upload exact files as GitHub Artifacts (no directories) ----------
      - name: Upload security artifacts (three files)
        if: ${{ always() && (github.event_name != 'workflow_dispatch' || inputs.upload_artifacts) }}
        uses: actions/upload-artifact@v4
        with:
          name: swft-security-artifacts-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          if-no-files-found: error
          path: |
            ${{ env.SBOM_FILE }}
            ${{ env.TRIVY_FILE }}
            ${{ env.SARIF_FILE }}

      # ---------- Deploy to Azure Container Instances (CLI) ----------
      - name: Deploy to Azure Container Instance
        env:
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
          AZURE_CONTAINER_NAME: ${{ env.AZURE_CONTAINER_NAME }}
          ACR_LOGIN_SERVER:     ${{ env.ACR_LOGIN_SERVER }}
          ACR_USERNAME:         ${{ env.ACR_USERNAME }}
          ACR_PASSWORD:         ${{ env.ACR_PASSWORD }}
          IMAGE_NAME:           ${{ env.IMAGE_NAME }}
          IMAGE_TAG:            ${{ env.IMAGE_TAG }}
        run: |
          echo "Checking if container instance exists..."
          if az container show \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_CONTAINER_NAME" \
              --only-show-errors \
              --output none 2>/dev/null; then
            echo "Container exists. Deleting and recreating..."
            az container delete \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_CONTAINER_NAME" \
              --yes
            echo "Waiting for container deletion..."
            for i in {1..30}; do
              if ! az container show --resource-group "$AZURE_RESOURCE_GROUP" --name "$AZURE_CONTAINER_NAME" &>/dev/null; then
                echo "Container deleted."
                break
              fi
              echo "... Still deleting... retry $i"
              sleep 5
            done
          else
            echo "Container does not exist. Creating new instance..."
          fi

          echo "Creating container instance..."
          az container create \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_CONTAINER_NAME" \
            --image "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" \
            --registry-login-server "$ACR_LOGIN_SERVER" \
            --registry-username     "$ACR_USERNAME" \
            --registry-password     "$ACR_PASSWORD" \
            --cpu 1 --memory 1 \
            --os-type Linux \
            --ports 80 \
            --ip-address Public

          echo "Fetching container public IP..."
          PUBLIC_IP=$(az container show \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_CONTAINER_NAME" \
            --query "ipAddress.ip" -o tsv)

          echo "http://$PUBLIC_IP" > "${DEPLOY_FILE}"
          echo "ACI_URL=http://${PUBLIC_IP}" >> $GITHUB_ENV
          {
            echo "### Deployment"
            echo ""
            echo "- ACI name: ${AZURE_CONTAINER_NAME}"
            echo "- Resource group: ${AZURE_RESOURCE_GROUP}"
            echo "- Image: ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
            echo "- Public URL: http://${PUBLIC_IP}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload deployment info to GitHub Artifacts
        if: ${{ always() && (github.event_name != 'workflow_dispatch' || inputs.upload_artifacts) }}
        uses: actions/upload-artifact@v4
        with:
          name: aci-deploy-info-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          if-no-files-found: error
          path: ${{ env.DEPLOY_FILE }}

      # ---------- Create canonical RUN JSON payload ----------
      - name: Build run JSON payload
        run: |
          set -e
          SBOM_LINK="${SBOM_URL:-}"
          TRIVY_LINK="${TRIVY_URL:-}"
          ARTIFACTS_NAME_SEC="swft-security-artifacts-${PROJECT_NAME}-${RUN_ID}"
          ARTIFACTS_NAME_DEP="aci-deploy-info-${PROJECT_NAME}-${RUN_ID}"
          jq -n \
            --arg id              "${RUN_ID}" \
            --arg projectName     "${PROJECT_NAME}" \
            --arg runNumber       "${RUN_NUMBER}" \
            --arg repo            "${GITHUB_REPOSITORY}" \
            --arg workflow        "${GITHUB_WORKFLOW}" \
            --arg ref             "${GITHUB_REF}" \
            --arg sha             "${GITHUB_SHA}" \
            --arg timestamp       "${RUN_TIMESTAMP}" \
            --arg actionsRunUrl   "${ACTIONS_RUN_URL}" \
            --arg acr             "${ACR_LOGIN_SERVER}" \
            --arg imageName       "${IMAGE_NAME}" \
            --arg imageTag        "${IMAGE_TAG}" \
            --arg imageDigest     "${IMAGE_DIGEST}" \
            --arg sbomFile        "${SBOM_FILE}" \
            --arg trivyFile       "${TRIVY_FILE}" \
            --arg sarifFile       "${SARIF_FILE}" \
            --arg sbomUrl         "${SBOM_LINK}" \
            --arg trivyUrl        "${TRIVY_LINK}" \
            --arg artifactsSec    "${ARTIFACTS_NAME_SEC}" \
            --arg artifactsDep    "${ARTIFACTS_NAME_DEP}" \
            --arg aciName         "${AZURE_CONTAINER_NAME}" \
            --arg aciRg           "${AZURE_RESOURCE_GROUP}" \
            --arg aciUrl          "${ACI_URL:-}" \
            --arg cosignStatus    "${COSIGN_VERIFY_STATUS:-unknown}" \
            --arg sevLevels       "${TRIVY_SEVERITY}" \
            --argjson ignoreUnfix ${TRIVY_IGNORE_UNFIXED} \
            --argjson findings    ${TRIVY_FINDINGS:-0} \
            '{
              id: $id,
              projectName: $projectName,
              createdAt: $timestamp,
              repository: $repo,
              workflow: $workflow,
              ref: $ref,
              commitSha: $sha,
              run: { id: $id, number: $runNumber, url: $actionsRunUrl },
              image: { registry: $acr, name: $imageName, tag: $imageTag, digest: $imageDigest },
              artifacts: {
                azure: ( ($sbomUrl|length)>0 or ($trivyUrl|length)>0 ) as $hasAzure
                  | if $hasAzure then { sbom: $sbomUrl, trivy: $trivyUrl } else null end,
                github: { securityBundleName: $artifactsSec, deployInfoName: $artifactsDep, runUrl: $actionsRunUrl },
                files: { sbom: $sbomFile, trivy: $trivyFile, sarif: $sarifFile }
              },
              assessment: {
                cosign: { verifyStatus: $cosignStatus },
                trivy: { severity: $sevLevels, ignoreUnfixed: $ignoreUnfix, findings: $findings }
              },
              deployment: { aci: { name: $aciName, resourceGroup: $aciRg, url: $aciUrl } }
            }' > "${RUN_JSON_FILE}"
          echo "Built ${RUN_JSON_FILE}"; head -n 40 "${RUN_JSON_FILE}" | jq .

      - name: Upload RUN JSON to Azure Storage (single folder)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name "${AZURE_STORAGE_ACCOUNT}" \
              --container-name "${{ inputs.storage_container_runs }}" \
              --file "${RUN_JSON_FILE}" \
              --name "${BLOB_PREFIX}/${RUN_JSON_FILE}" \
              --overwrite \
              --auth-mode login
            RUN_JSON_URL=$(az storage blob url --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_runs }}" --name "${BLOB_PREFIX}/${RUN_JSON_FILE}" -o tsv)
            echo "RUN_JSON_URL=$RUN_JSON_URL" >> $GITHUB_ENV

      - name: Upload RUN JSON as GitHub Artifact (single file)
        if: ${{ always() && (github.event_name != 'workflow_dispatch' || inputs.upload_artifacts) }}
        uses: actions/upload-artifact@v4
        with:
          name: swft-run-json-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          if-no-files-found: error
          path: ${{ env.RUN_JSON_FILE }}

      - name: List uploaded blobs and add links to summary
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "### Azure uploads" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "- SBOM:  ${SBOM_URL:-'(uploaded to Artifacts only)'}"  >> "$GITHUB_STEP_SUMMARY"
            echo "- Trivy: ${TRIVY_URL:-'(uploaded to Artifacts only)'}" >> "$GITHUB_STEP_SUMMARY"
            echo "- Run JSON: ${RUN_JSON_URL:-'(uploaded to Artifacts only)'}" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "- Run page (Artifacts): ${ACTIONS_RUN_URL}" >> "$GITHUB_STEP_SUMMARY"
