name: SWFT Container CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - "python/**"
  pull_request:
    branches: [ main ]
    paths:
      - "python/**"
  workflow_dispatch:
    inputs:
      project_name:
        description: "Logical Project Name for SWFT tracking"
        type: string
        default: "swft-demo"
      upload_to_azure:
        description: "Upload SBOM/scan/run JSON to Azure Storage (SAS token)"
        type: boolean
        default: true
      upload_artifacts:
        description: "Upload SBOM/scan/run JSON as GitHub Artifacts"
        type: boolean
        default: true
      trivy_config:
        description: "scan=<levels>;ignore_unfixed=<true|false>;fail=<levels>"
        type: string
        default: "scan=HIGH,CRITICAL;ignore_unfixed=true;fail=CRITICAL"
      storage_containers:
        description: "sboms,scans,runs"
        type: string
        default: "sboms,scans,runs"
      fail_on_trivy:
        description: "Fail the workflow if FAIL set has findings (manual runs only)"
        type: boolean
        default: false
      fail_on_cosign_verify:
        description: "Fail the workflow if Cosign verify fails"
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write
  security-events: write

env:
  # Registry
  ACR_LOGIN_SERVER:     ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME:         ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD:         ${{ secrets.ACR_PASSWORD }}
  IMAGE_NAME:           fastapi-demo
  IMAGE_TAG:            ${{ secrets.IMAGE_TAG }}

  # Azure targets
  AZURE_RESOURCE_GROUP: demo-swft-cicd
  AZURE_CONTAINER_NAME: swft-fastapi
  AZURE_STORAGE_ACCOUNT: ${{ vars.STORAGE_ACCOUNT }}
  AZ_SAS_TOKEN_STORAGE: ${{ secrets.AZ_SAS_TOKEN_STORAGE }}

  # Defaults for push runs (used if no override via trivy_config)
  TRIVY_SEVERITY:       HIGH,CRITICAL
  TRIVY_IGNORE_UNFIXED: true

  # Names & IDs
  PROJECT_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.project_name || vars.PROJECT_NAME || github.event.repository.name }}
  RUN_ID:       ${{ github.run_id }}
  RUN_NUMBER:   ${{ github.run_number }}

  # FIXED artifact filenames (we always create & upload these)
  SBOM_SRC:     sbom.cyclonedx.json
  TRIVY_SRC:    trivy-report.json
  SARIF_SRC:    trivy-results.sarif
  DEPLOY_SRC:   aci-endpoint.txt
  RUNJSON_SRC:  run.json

jobs:
  build-and-upload:
    runs-on: self-hosted
    permissions:
      contents: read
      id-token: write
      security-events: write
    defaults: { run: { shell: bash } }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug show commit & files
        run: |-
          set -e
          echo "=== Environment ==="
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo -e "\n=== Repository Status ==="
          git status
          echo -e "\n=== Workflow File Info ==="
          echo "Looking for workflow file at: .github/workflows/deploy.yml"
          if [ -f ".github/workflows/deploy.yml" ]; then
            echo "Workflow file exists at the expected location"
            git log -1 --pretty=oneline -- .github/workflows/deploy.yml || echo "No git history found for workflow file"
          else
            echo "Workflow file NOT found at .github/workflows/deploy.yml"
            echo "Current directory: $(pwd)"
            echo -e "\n=== Directory Contents ==="
            ls -la
            echo -e "\n=== .github/ Contents ==="
            ls -la .github/ 2>/dev/null || echo ".github/ directory not found"
            echo -e "\n=== .github/workflows/ Contents ==="
            ls -la .github/workflows/ 2>/dev/null || echo ".github/workflows/ directory not found"
          fi
          echo -e "\n=== Python Directory ==="
          if [ -d "python" ]; then
            ls -la python
          else
            echo "python/ directory not found"
          fi

      - name: Guard ensure python/requirements.txt exists
        run: |
          test -f python/requirements.txt || {
            echo "::error::python/requirements.txt is missing in this checkout";
            exit 12;
          }

      # === QUALITY CHECKS (uses same Azure auth) ===
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps & test with coverage
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt
          if [ -f python/requirements-dev.txt ]; then pip install -r python/requirements-dev.txt; fi
          cd python && \
          pytest tests/ -v --cov=app --cov-report=xml:coverage.xml

      - name: Set up Java (for Sonar scanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Test SonarQube Connection
        run: |
          echo "Testing SonarQube connection..."
          echo "SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}"
          curl -v -I ${{ secrets.SONAR_HOST_URL }}
          curl -v ${{ secrets.SONAR_HOST_URL }}/api/server/version

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_SCANNER_OPTS: -Dproject.settings=python/sonar-project.properties
          

      - name: SonarQube Quality Gate (Non-blocking for vulnerability testing)
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 15
        continue-on-error: true  # Allow pipeline to continue even if quality gate fails
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Display SonarQube Results Summary
        if: always()
        run: |
          echo "=== SonarQube Analysis Complete ==="
          echo "✅ SonarQube scan completed successfully"
          echo "⚠️ Quality Gate status: Check dashboard for detected vulnerabilities"
          echo ""
          echo "🔍 View detailed results at:"
          echo "${{ secrets.SONAR_HOST_URL }}/dashboard?id=swft-python"
          echo ""
          echo "🚨 Expected security findings in this test project:"
          echo "• Security Hotspots: Hardcoded credentials, command injection, SQL injection"
          echo "• Code Smells: Weak cryptography, information disclosure"
          echo "• Bugs: Insecure deserialization, path traversal"
          echo ""
          echo "This is a test project with intentional vulnerabilities for security scanning validation."

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          source-root: python

      - name: Autobuild (CodeQL)
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      # Install CodeQL CLI for database export
      - name: Install CodeQL CLI
        if: always()
        run: |
          set -euo pipefail
          echo "=== Installing CodeQL CLI ==="
          
          # Download and install CodeQL CLI
          CODEQL_VERSION="2.15.3"
          wget -q "https://github.com/github/codeql-cli-binaries/releases/download/v${CODEQL_VERSION}/codeql-linux64.zip"
          unzip -q codeql-linux64.zip
          sudo mv codeql /usr/local/bin/
          
          # Verify installation
          codeql version
          echo "✅ CodeQL CLI installed successfully"

      # Export CodeQL database for later querying
      - name: Export CodeQL Database
        if: always()
        run: |
          set -euo pipefail
          echo "=== Exporting CodeQL Database ==="
          
          # Find the CodeQL database directory
          DB_PATH="${{ runner.temp }}/codeql_databases/python"
          if [ ! -d "$DB_PATH" ]; then
            # Alternative paths where CodeQL might store the database
            DB_PATH="${GITHUB_WORKSPACE}/.github/codeql/databases/python"
          fi
          
          if [ -d "$DB_PATH" ]; then
            echo "✅ Found CodeQL database at: $DB_PATH"
            
            # Create export directory
            mkdir -p codeql-export
            
            # Export database as compressed archive using CodeQL CLI
            echo "📦 Creating database bundle using CodeQL CLI..."
            codeql database bundle --output="codeql-export/codeql-database-python.tar.gz" "$DB_PATH"
            
            echo "✅ CodeQL database exported to: codeql-export/codeql-database-python.tar.gz"
            ls -la codeql-export/
            echo "📊 Archive size: $(du -h codeql-export/codeql-database-python.tar.gz)"
          else
            echo "⚠️ CodeQL database not found at expected locations"
            echo "Searching for CodeQL databases..."
            find "${{ runner.temp }}" -name "*codeql*" -type d 2>/dev/null || true
            find "$GITHUB_WORKSPACE" -name "*codeql*" -type d 2>/dev/null || true
            
            # List contents of runner temp to help debug
            echo "📂 Contents of runner temp:"
            ls -la "${{ runner.temp }}/" 2>/dev/null || true
          fi

      # === DOCKER BUILD & DEPLOY (uses same Azure auth) ===

      - name: Derive pretty names & timestamp
        run: |
          set -euo pipefail
          FILE_PREFIX="${PROJECT_NAME}-${RUN_ID}"
          {
            echo "FILE_PREFIX=$FILE_PREFIX"
            echo "SBOM_FILE=${FILE_PREFIX}-sbom.json"
            echo "TRIVY_FILE=${FILE_PREFIX}-trivy.json"
            echo "SARIF_FILE=${FILE_PREFIX}-trivy.sarif"
            echo "CODEQL_DB_FILE=${FILE_PREFIX}-codeql-db.tar.gz"
            echo "DEPLOY_FILE=${FILE_PREFIX}-deploy.txt"
            echo "RUN_JSON_FILE=${FILE_PREFIX}-run.json"
            echo "ACTIONS_RUN_URL=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}"
            echo "RUN_TIMESTAMP=$(date -u +%FT%TZ)"
          } >> $GITHUB_ENV

      - name: Parse inputs (Trivy + containers + switches)
        id: cfg
        run: |
          set -euo pipefail
          # ---- Trivy config
          TC="${{ github.event_name == 'workflow_dispatch' && inputs.trivy_config || '' }}"
          [ -z "$TC" ] && TC="scan=${TRIVY_SEVERITY};ignore_unfixed=${TRIVY_IGNORE_UNFIXED};fail=CRITICAL"
          SCAN=$(echo "$TC" | sed -n 's/.*scan=\([^;]*\).*/\1/p'); [ -z "$SCAN" ] && SCAN="${TRIVY_SEVERITY}"
          IGN=$(echo "$TC"  | sed -n 's/.*ignore_unfixed=\([^;]*\).*/\1/p'); [ -z "$IGN" ] && IGN="${TRIVY_IGNORE_UNFIXED}"
          FAIL=$(echo "$TC" | sed -n 's/.*fail=\([^;]*\).*/\1/p'); [ -z "$FAIL" ] && FAIL="CRITICAL"
          echo "scan_levels=$SCAN"         >> $GITHUB_OUTPUT
          echo "ignore_unfixed=$IGN"       >> $GITHUB_OUTPUT
          echo "fail_levels=$FAIL"         >> $GITHUB_OUTPUT

          # ---- Containers
          CS="${{ github.event_name == 'workflow_dispatch' && inputs.storage_containers || '' }}"
          [ -z "$CS" ] && CS="sboms,scans,runs"
          IFS=',' read -r CN_SBOM CN_SCAN CN_RUNS <<< "$CS"
          echo "cn_sbom=${CN_SBOM:-sboms}" >> $GITHUB_OUTPUT
          echo "cn_scan=${CN_SCAN:-scans}" >> $GITHUB_OUTPUT
          echo "cn_runs=${CN_RUNS:-runs}"  >> $GITHUB_OUTPUT

          # ---- Effective switches (works for push AND manual)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            AZ="${{ inputs.upload_to_azure }}"
            AR="${{ inputs.upload_artifacts }}"
          else
            AZ="${{ vars.UPLOAD_TO_AZURE || 'true' }}"
            AR="${{ vars.UPLOAD_ARTIFACTS || 'true' }}"
          fi
          echo "upload_to_azure=$AZ"  >> $GITHUB_OUTPUT
          echo "upload_artifacts=$AR" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./python  
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Pull image for local scan
        run: docker pull "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Get image digest
        run: |
          set -euo pipefail
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}" | awk -F'@' '{print $2}')
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.0

      - name: Sign image (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1  # Enable keyless signing
        run: |
          set +e
          REF="${ACR_LOGIN_SERVER}/${IMAGE_NAME}@${IMAGE_DIGEST}"
          echo "🔑 Attempting to sign image using keyless mode: $REF"
          
          # Sign using keyless mode (will open browser for OIDC auth)
          if cosign sign "$REF"; then
              echo "✅ Image signed successfully using keyless mode"
          else
              SIGN_STATUS=$?
              echo "⚠️  Warning: Failed to sign image (exit code $SIGN_STATUS)"
              # Continue workflow even if signing fails
              exit 0
          fi

      - name: Verify image signature (keyless)
        run: |
          set +e
          REF="${ACR_LOGIN_SERVER}/${IMAGE_NAME}@${IMAGE_DIGEST}"
          echo "🔍 Verifying image signature: $REF"
          
          if cosign verify "$REF"; then
              echo "✅ Image signature verification passed"
              echo "COSIGN_VERIFY_STATUS=passed" >> $GITHUB_ENV
          else
              echo "⚠️  Image signature verification failed"
              echo "COSIGN_VERIFY_STATUS=failed" >> $GITHUB_ENV
          fi

      # === GENERATE FILES WITH OFFICIAL ACTIONS (fixed names) ===
      - name: Generate SBOM (Syft via Anchore)
        uses: anchore/sbom-action@v0.20.1
        with:
          image:        ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format:       cyclonedx-json
          output-file:  sbom.cyclonedx.json
          upload-artifact: false

      - name: Verify SBOM exists
        run: |
          set -euo pipefail
          test -s "sbom.cyclonedx.json" || { echo "SBOM not created"; ls -la; exit 2; }

      - name: Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@0.33.1
        env:
          TRIVY_USERNAME: ${{ env.ACR_USERNAME }}
          TRIVY_PASSWORD: ${{ env.ACR_PASSWORD }}
        with:
          version: 'v0.66.0'
          scan-type: 'image'
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'json'
          output: trivy-report.json
          severity: ${{ steps.cfg.outputs.scan_levels }}
          ignore-unfixed: ${{ steps.cfg.outputs.ignore_unfixed }}
          scanners: 'vuln'
          exit-code: '0'

      - name: Verify Trivy JSON exists
        run: |
          set -euo pipefail
          test -s "trivy-report.json" || { echo "Trivy JSON not created"; ls -la; exit 2; }

      - name: Generate Trivy SARIF
        uses: aquasecurity/trivy-action@0.33.1
        with:
          version: 'v0.66.0'
          scan-type: 'image'
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: trivy-results.sarif
          severity: ${{ steps.cfg.outputs.scan_levels }}
          ignore-unfixed: ${{ steps.cfg.outputs.ignore_unfixed }}
          scanners: 'vuln'
          exit-code: '0'

      - name: Verify Trivy SARIF exists
        run: |
          set -euo pipefail
          test -s "trivy-results.sarif" || { echo "Trivy SARIF not created"; ls -la; exit 2; }

      - name: Ensure jq present (for policy)
        run: jq --version || (sudo apt-get update -y && sudo apt-get install -y jq)

      - name: Enforce Trivy policy (fail only on selected severities)
        env:
          POLICY_FAIL_ON_TRIVY:  ${{ github.event_name == 'workflow_dispatch' && inputs.fail_on_trivy || (vars.FAIL_ON_TRIVY || 'false') }}
          SCAN_LEVELS:           ${{ steps.cfg.outputs.scan_levels }}
          FAIL_LEVELS:           ${{ steps.cfg.outputs.fail_levels }}
        run: |
          set -euo pipefail
          TOTAL_COUNT=$(jq --arg sev "$SCAN_LEVELS" '
            [ .Results[].Vulnerabilities[]? as $v
              | ($sev | split(",")) as $levels
              | select($levels | index($v.Severity))
            ] | length' "trivy-report.json")
          FAIL_COUNT=$(jq --arg sev "$FAIL_LEVELS" '
            [ .Results[].Vulnerabilities[]? as $v
              | ($sev | split(",")) as $levels
              | select($levels | index($v.Severity))
            ] | length' "trivy-report.json")
          echo "TRIVY_FINDINGS_TOTAL=$TOTAL_COUNT" >> $GITHUB_ENV
          echo "TRIVY_FINDINGS_FAILSET=$FAIL_COUNT" >> $GITHUB_ENV
          if [ "$POLICY_FAIL_ON_TRIVY" = "true" ] && [ "$FAIL_COUNT" -gt 0 ]; then
            echo "Failing due to findings in fail set ($FAIL_LEVELS): $FAIL_COUNT"
            exit 1
          fi

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        # category intentionally omitted (single SARIF)

      # ---------- Azure uploads (work on push and manual; FLAT filenames) ----------
      - name: Upload SBOM to Azure Storage (SAS)
        if: ${{ steps.validate_azure.outputs.upload_to_azure == 'true' }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Uploading SBOM to Azure Storage..."
            az storage blob upload \
              --account-name "$AZURE_STORAGE_ACCOUNT" \
              --sas-token "$AZ_SAS_TOKEN_STORAGE" \
              --container-name "${{ steps.cfg.outputs.cn_sbom || 'sboms' }}" \
              --name "${{ env.SBOM_SRC }}" \
              --file "${{ env.SBOM_SRC }}" \
              --overwrite true
            echo "SBOM uploaded successfully"

      - name: Upload Trivy report to Azure Storage (flat name)
        if: ${{ steps.validate_azure.outputs.upload_to_azure == 'true' }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Uploading Trivy report to Azure Storage..."
            az storage blob upload \
              --account-name "$AZURE_STORAGE_ACCOUNT" \
              --sas-token "$AZ_SAS_TOKEN_STORAGE" \
              --container-name "${{ steps.cfg.outputs.cn_scan || 'scans' }}" \
              --name "${{ env.TRIVY_SRC }}" \
              --file "${{ env.TRIVY_SRC }}" \
              --overwrite true
            echo "Trivy report uploaded successfully"

      - name: Upload CodeQL Database to Azure Storage
        if: ${{ steps.validate_azure.outputs.upload_to_azure == 'true' && hashFiles('codeql-export/codeql-database-python.tar.gz') != '' }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Copying CodeQL database to final location..."
            cp "codeql-export/codeql-database-python.tar.gz" "${CODEQL_DB_FILE}"
            
            echo "Uploading CodeQL database to Azure Storage..."
            az storage blob upload \
              --account-name "$AZURE_STORAGE_ACCOUNT" \
              --sas-token "$AZ_SAS_TOKEN_STORAGE" \
              --container-name "${{ steps.cfg.outputs.cn_scan || 'scans' }}" \
              --name "${CODEQL_DB_FILE}" \
              --file "${CODEQL_DB_FILE}" \
              --overwrite true
            echo "CodeQL database uploaded successfully"
            
            # Store URL for later use
            CODEQL_DB_URL="https://$AZURE_STORAGE_ACCOUNT.blob.core.windows.net/${{ steps.cfg.outputs.cn_scan || 'scans' }}/${CODEQL_DB_FILE}"
            echo "CODEQL_DB_URL=$CODEQL_DB_URL" >> $GITHUB_ENV

      # ---------- Upload each artifact as a single file ----------
      - name: Upload SBOM artifact
        if: ${{ always() && steps.cfg.outputs.upload_artifacts == 'true' && hashFiles('sbom.cyclonedx.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          path: sbom.cyclonedx.json

      - name: Upload Trivy JSON artifact
        if: ${{ always() && steps.cfg.outputs.upload_artifacts == 'true' && hashFiles('trivy-report.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          path: trivy-report.json

      - name: Upload Trivy SARIF artifact
        if: ${{ always() && steps.cfg.outputs.upload_artifacts == 'true' && hashFiles('trivy-results.sarif') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          path: trivy-results.sarif

      - name: Upload CodeQL Database artifact
        if: ${{ always() && steps.cfg.outputs.upload_artifacts == 'true' && hashFiles('codeql-export/codeql-database-python.tar.gz') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: codeql-database-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          path: codeql-export/codeql-database-python.tar.gz

      # ---------- Build RUN JSON AFTER Azure uploads & Deploy ----------
      - name: Ensure jq present (for RUN JSON)
        run: jq --version || (sudo apt-get update -y && sudo apt-get install -y jq)

      - name: Build run JSON payload (fixed jq program)
        id: build_run_json
        run: |
          set -euo pipefail
          SBOM_LINK="${SBOM_URL:-}"
          TRIVY_LINK="${TRIVY_URL:-}"
          CODEQL_LINK="${CODEQL_DB_URL:-}"
          jq -n \
            --arg id              "${RUN_ID}" \
            --arg projectName     "${PROJECT_NAME}" \
            --arg runNumber       "${RUN_NUMBER}" \
            --arg repo            "${GITHUB_REPOSITORY}" \
            --arg workflow        "${GITHUB_WORKFLOW}" \
            --arg ref             "${GITHUB_REF}" \
            --arg sha             "${GITHUB_SHA}" \
            --arg timestamp       "${RUN_TIMESTAMP}" \
            --arg actionsRunUrl   "${ACTIONS_RUN_URL}" \
            --arg acr             "${ACR_LOGIN_SERVER}" \
            --arg imageName       "${IMAGE_NAME}" \
            --arg imageTag        "${IMAGE_TAG}" \
            --arg imageDigest     "${IMAGE_DIGEST}" \
            --arg sbomFile        "${SBOM_FILE}" \
            --arg trivyFile       "${TRIVY_FILE}" \
            --arg sarifFile       "${SARIF_FILE}" \
            --arg codeqlDbFile    "${CODEQL_DB_FILE}" \
            --arg sbomUrl         "${SBOM_LINK}" \
            --arg trivyUrl        "${TRIVY_LINK}" \
            --arg codeqlUrl       "${CODEQL_LINK}" \
            --arg aciName         "${AZURE_CONTAINER_NAME}" \
            --arg aciRg           "${AZURE_RESOURCE_GROUP}" \
            --arg aciUrl          "${ACI_URL:-}" \
            --arg cosignStatus    "${COSIGN_VERIFY_STATUS:-unknown}" \
            --arg sevLevels       "${{ steps.cfg.outputs.scan_levels }}" \
            --arg failLevels      "${{ steps.cfg.outputs.fail_levels }}" \
            --argjson ignoreUnfix ${{ steps.cfg.outputs.ignore_unfixed }} \
            --argjson totalFindings ${TRIVY_FINDINGS_TOTAL:-0} \
            --argjson failFindings  ${TRIVY_FINDINGS_FAILSET:-0} \
            '
            def azure_links:
              if (($sbomUrl|length) > 0 or ($trivyUrl|length) > 0 or ($codeqlUrl|length) > 0)
              then { sbom: $sbomUrl, trivy: $trivyUrl, codeqlDb: $codeqlUrl }
              else null
              end;

            {
              id: $id,
              projectName: $projectName,
              createdAt: $timestamp,
              repository: $repo,
              workflow: $workflow,
              ref: $ref,
              commitSha: $sha,
              run: { id: $id, number: $runNumber, url: $actionsRunUrl },
              image: { registry: $acr, name: $imageName, tag: $imageTag, digest: $imageDigest },
              artifacts: {
                azure: azure_links,
                files: { sbom: $sbomFile, trivy: $trivyFile, sarif: $sarifFile, codeqlDb: $codeqlDbFile }
              },
              assessment: {
                cosign: { verifyStatus: $cosignStatus },
                trivy: {
                  scanSeverities: $sevLevels,
                  ignoreUnfixed: $ignoreUnfix,
                  failSeverities: $failLevels,
                  findings: { total: $totalFindings, failSet: $failFindings }
                }
              },
              deployment: { aci: { name: $aciName, resourceGroup: $aciRg, url: $aciUrl } }
            }' > run.json
          test -s run.json
          ls -l run.json

      - name: Upload RUN JSON to Azure Storage (flat name)
        if: ${{ steps.validate_azure.outputs.upload_to_azure == 'true' }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Uploading run.json to Azure Storage..."
            test -s run.json || { echo "Error: run.json not found or empty"; pwd; ls -la; exit 2; }
            az storage blob upload \
              --account-name "$AZURE_STORAGE_ACCOUNT" \
              --sas-token "$AZ_SAS_TOKEN_STORAGE" \
              --container-name "${{ steps.cfg.outputs.cn_runs || 'runs' }}" \
              --name "${{ env.RUNJSON_SRC }}" \
              --file "${{ env.RUNJSON_SRC }}" \
              --overwrite true
            echo "run.json uploaded successfully"

      - name: Upload RUN JSON artifact
        if: ${{ always() && steps.cfg.outputs.upload_artifacts == 'true' && hashFiles('run.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: swft-run-json-${{ env.PROJECT_NAME }}-${{ env.RUN_ID }}
          path: run.json

      - name: Azure upload summary
        if: ${{ steps.cfg.outputs.upload_to_azure == 'true' }}
        run: |
          {
            echo "### Azure uploads"
            echo ""
            echo "- SBOM:  ${SBOM_URL:-'(n/a)'}"
            echo "- Trivy: ${TRIVY_URL:-'(n/a)'}"
            echo "- CodeQL Database: ${CODEQL_DB_URL:-'(n/a)'}"
            echo "- Run JSON: ${RUN_JSON_URL:-'(n/a)'}"
            echo ""
            echo "### CodeQL Database Usage"
            echo ""
            echo "The CodeQL database has been exported and uploaded alongside Trivy results."
            echo "To query the database later:"
            echo ""
            echo '```bash'
            echo "# Download the database"
            echo "wget '${CODEQL_DB_URL:-'<codeql-db-url>'}' -O codeql-database-python.tar.gz"
            echo ""
            echo "# Extract the database"
            echo "tar -xzf codeql-database-python.tar.gz"
            echo ""
            echo "# Run custom CodeQL queries"
            echo "codeql database analyze ./codeql-database-python --format=sarif-latest --output=custom-results.sarif -- query.ql"
            echo ""
            echo "# Or run standard query suites"
            echo "codeql database analyze ./codeql-database-python --format=sarif-latest --output=security-results.sarif python-security-and-quality.qls"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
