name: SWFT Container CI/CD (AzureCloud, no-bicep)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      upload_to_azure:
        description: "Upload SBOM and Trivy reports to Azure Storage (RBAC via azure/login)"
        type: boolean
        default: false
      upload_artifacts:
        description: "Upload SBOM/scan/deploy info as GitHub Artifacts"
        type: boolean
        default: true
      storage_container_sboms:
        description: "Azure container for SBOMs"
        type: string
        default: "sboms"
      storage_container_scans:
        description: "Azure container for vulnerability scans"
        type: string
        default: "scans"
      # Trivy controls ONLY for manual runs (push runs never fail on findings)
      fail_on_trivy:
        description: "Fail the workflow if Trivy finds vulnerabilities (manual runs only)"
        type: boolean
        default: false
      trivy_severity:
        description: "Severities to gate on (comma-separated)"
        type: string
        default: "HIGH,CRITICAL"
      trivy_ignore_unfixed:
        description: "Ignore unfixed vulnerabilities"
        type: boolean
        default: true
      fail_on_cosign_verify:
        description: "Fail the workflow if Cosign verify fails"
        type: boolean
        default: true

permissions:
  contents: read
  id-token: write
  security-events: write  # needed to upload SARIF

env:
  # Container registry
  ACR_LOGIN_SERVER:     ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME:         ${{ secrets.ACR_USERNAME }}     # SP clientId or ACR admin username
  ACR_PASSWORD:         ${{ secrets.ACR_PASSWORD }}     # SP clientSecret or ACR admin password
  IMAGE_NAME:           fastapi-demo
  IMAGE_TAG:            ${{ secrets.IMAGE_TAG }}

  # Azure resources
  AZURE_RESOURCE_GROUP: demo-swft-cicd
  AZURE_CONTAINER_NAME: swft-fastapi
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}

  # Defaults for push runs (wonâ€™t fail the job)
  TRIVY_SEVERITY:       ${{ vars.TRIVY_SEVERITY || 'HIGH,CRITICAL' }}
  TRIVY_IGNORE_UNFIXED: ${{ vars.TRIVY_IGNORE_UNFIXED || 'true' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (Service Principal, AzureCloud)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: azureCloud

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Pull image for local scan
        run: docker pull "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.0

      - name: Decode Cosign keys
        run: |
          echo "${{ secrets.COSIGN_KEY_B64 }}" | base64 -d > cosign.key
          chmod 600 cosign.key
          echo "${{ secrets.COSIGN_PUB_KEY_B64 }}" | base64 -d > cosign.pub
          chmod 644 cosign.pub

      - name: Sign image (registry-only)
        run: |
          cosign sign \
            --key cosign.key \
            --tlog-upload=false \
            "${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Generate SBOM (Syft via Anchore)
        uses: anchore/sbom-action@v0.20.1
        with:
          image:        ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format:       cyclonedx-json
          output-file:  sbom.cyclonedx.json
          upload-artifact: false

      - name: Run Trivy vulnerability scanner (image)
        id: trivy
        uses: aquasecurity/trivy-action@0.33.1
        env:
          TRIVY_USERNAME: ${{ env.ACR_USERNAME }}
          TRIVY_PASSWORD: ${{ env.ACR_PASSWORD }}
        with:
          version: 'v0.66.0'
          scan-type: 'image'
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'json'
          output: 'trivy-report.json'
          severity: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_severity || env.TRIVY_SEVERITY }}
          ignore-unfixed: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_ignore_unfixed || env.TRIVY_IGNORE_UNFIXED }}
          scanners: 'vuln'
          hide-progress: true
          cache: true
          cache-dir: ${{ github.workspace }}/.cache/trivy
          exit-code: '0'   # never fail here

      - name: Ensure jq present
        run: jq --version || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Show generated files
        run: |
          ls -lh sbom.cyclonedx.json || true
          ls -lh trivy-report.json || true

      - name: Enforce Trivy policy (manual runs can fail; pushes do NOT)
        env:
          POLICY_FAIL_ON_TRIVY:        ${{ github.event_name == 'workflow_dispatch' && inputs.fail_on_trivy || 'false' }}
          POLICY_TRIVY_SEVERITY:       ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_severity || env.TRIVY_SEVERITY }}
          POLICY_TRIVY_IGNORE_UNFIXED: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_ignore_unfixed || env.TRIVY_IGNORE_UNFIXED }}
        run: |
          set -e
          if [ ! -s trivy-report.json ]; then
            echo "Trivy report missing or empty"; exit 2
          fi

          SEVERITIES="$POLICY_TRIVY_SEVERITY"
          COUNT=$(jq --arg sev "$SEVERITIES" '
            [.Results[].Vulnerabilities[]? as $v
              | ($sev | split(",")) as $levels
              | select($levels | index($v.Severity))
            ] | length' trivy-report.json)

          echo "Findings at severities [$SEVERITIES]: $COUNT"
          {
            echo "### Trivy summary"
            echo ""
            echo "- Fail on Trivy (manual only): $POLICY_FAIL_ON_TRIVY"
            echo "- Severities: $SEVERITIES"
            echo "- Ignore unfixed: $POLICY_TRIVY_IGNORE_UNFIXED"
            echo "- Findings: $COUNT"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$POLICY_FAIL_ON_TRIVY" = "true" ] && [ "$COUNT" -gt 0 ]; then
            echo "Failing due to Trivy findings (manual run opted-in)."
            exit 1
          fi
          echo "Continuing (policy)."

      # ---- Optional: SARIF to Security tab ----
      - name: Generate Trivy SARIF
        uses: aquasecurity/trivy-action@0.33.1
        with:
          version: 'v0.66.0'
          scan-type: 'image'
          image-ref: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_severity || env.TRIVY_SEVERITY }}
          ignore-unfixed: ${{ github.event_name == 'workflow_dispatch' && inputs.trivy_ignore_unfixed || env.TRIVY_IGNORE_UNFIXED }}
          scanners: 'vuln'
          exit-code: '0'

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      # ---------- Optional Azure uploads (RBAC, no SAS) ----------
      - name: Ensure Azure containers
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage container create --name "${{ inputs.storage_container_sboms }}"  --account-name "${AZURE_STORAGE_ACCOUNT}" --auth-mode login >/dev/null
            az storage container create --name "${{ inputs.storage_container_scans }}" --account-name "${AZURE_STORAGE_ACCOUNT}" --auth-mode login >/dev/null

      - name: Upload SBOM to Azure Storage
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name "${AZURE_STORAGE_ACCOUNT}" \
              --container-name "${{ inputs.storage_container_sboms }}" \
              --file sbom.cyclonedx.json \
              --name "${IMAGE_NAME}-${IMAGE_TAG}-sbom.json" \
              --overwrite \
              --auth-mode login
            SBOM_URL=$(az storage blob url --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_sboms }}" --name "${IMAGE_NAME}-${IMAGE_TAG}-sbom.json" -o tsv)
            echo "SBOM_URL=$SBOM_URL" >> $GITHUB_ENV

      - name: Upload Trivy report to Azure Storage
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az storage blob upload \
              --account-name "${AZURE_STORAGE_ACCOUNT}" \
              --container-name "${{ inputs.storage_container_scans }}" \
              --file trivy-report.json \
              --name "${IMAGE_NAME}-${IMAGE_TAG}-trivy.json" \
              --overwrite \
              --auth-mode login
            TRIVY_URL=$(az storage blob url --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_scans }}" --name "${IMAGE_NAME}-${IMAGE_TAG}-trivy.json" -o tsv)
            echo "TRIVY_URL=$TRIVY_URL" >> $GITHUB_ENV

      - name: List uploaded blobs & add links to summary
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.upload_to_azure }}
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "### Azure uploads" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "- SBOM:  ${SBOM_URL}"  >> "$GITHUB_STEP_SUMMARY"
            echo "- Trivy: ${TRIVY_URL}" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Blobs in ${{ inputs.storage_container_sboms }}:" >> "$GITHUB_STEP_SUMMARY"
            az storage blob list --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_sboms }}" --query "[].name" -o tsv >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Blobs in ${{ inputs.storage_container_scans }}:" >> "$GITHUB_STEP_SUMMARY"
            az storage blob list --account-name "${AZURE_STORAGE_ACCOUNT}" --container-name "${{ inputs.storage_container_scans }}" --query "[].name" -o tsv >> "$GITHUB_STEP_SUMMARY"

      # ---------- Downloads via GitHub Artifacts (always run) ----------
      - name: Upload security artifacts (SBOM & Trivy) to GitHub Artifacts
        if: ${{ always() && (github.event_name != 'workflow_dispatch' || inputs.upload_artifacts) }}
        uses: actions/upload-artifact@v4
        with:
          name: swft-security-artifacts-${{ env.IMAGE_TAG }}
          if-no-files-found: error
          path: |
            sbom.cyclonedx.json
            trivy-report.json
            trivy-results.sarif

      # ---------- Deploy to Azure Container Instances (CLI) ----------
      - name: Deploy to Azure Container Instance
        env:
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
          AZURE_CONTAINER_NAME: ${{ env.AZURE_CONTAINER_NAME }}
          ACR_LOGIN_SERVER:     ${{ env.ACR_LOGIN_SERVER }}
          ACR_USERNAME:         ${{ env.ACR_USERNAME }}
          ACR_PASSWORD:         ${{ env.ACR_PASSWORD }}
          IMAGE_NAME:           ${{ env.IMAGE_NAME }}
          IMAGE_TAG:            ${{ env.IMAGE_TAG }}
        run: |
          echo "Checking if container instance exists..."
          if az container show \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_CONTAINER_NAME" \
              --only-show-errors \
              --output none 2>/dev/null; then
            echo "Container exists. Deleting and recreating..."
            az container delete \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_CONTAINER_NAME" \
              --yes

            echo "Waiting for container deletion..."
            for i in {1..30}; do
              if ! az container show --resource-group "$AZURE_RESOURCE_GROUP" --name "$AZURE_CONTAINER_NAME" &>/dev/null; then
                echo "Container deleted."
                break
              fi
              echo "... Still deleting... retry $i"
              sleep 5
            done
          else
            echo "Container does not exist. Creating new instance..."
          fi

          echo "Creating container instance..."
          az container create \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_CONTAINER_NAME" \
            --image "$ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG" \
            --registry-login-server "$ACR_LOGIN_SERVER" \
            --registry-username     "$ACR_USERNAME" \
            --registry-password     "$ACR_PASSWORD" \
            --cpu 1 --memory 1 \
            --os-type Linux \
            --ports 80 \
            --ip-address Public

          echo "Fetching container public IP..."
          PUBLIC_IP=$(az container show \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_CONTAINER_NAME" \
            --query "ipAddress.ip" -o tsv)

          echo "http://$PUBLIC_IP" > aci-endpoint.txt
          {
            echo "### Deployment"
            echo ""
            echo "- ACI name: ${AZURE_CONTAINER_NAME}"
            echo "- Resource group: ${AZURE_RESOURCE_GROUP}"
            echo "- Image: ${ACR_LOGIN_SERVER}/${IMAGE_NAME}:${IMAGE_TAG}"
            echo "- Public URL: http://${PUBLIC_IP}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload deployment info to GitHub Artifacts
        if: ${{ always() && (github.event_name != 'workflow_dispatch' || inputs.upload_artifacts) }}
        uses: actions/upload-artifact@v4
        with:
          name: aci-deploy-info-${{ env.IMAGE_TAG }}
          if-no-files-found: ignore
          path: aci-endpoint.txt
